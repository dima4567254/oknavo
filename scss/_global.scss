$maxWidthContainer:1170;
// $maxWidth:1920;
$containerWidth:1200;
$minWidth:320;

// @include adaptiv-value( "padding" 50, 20, 0, );

// Адаптивное свойство (clamp)
@mixin adaptiveValue($property, $startSize, $minSize, $widthFrom: $containerWidth, $widthTo: $minWidth, $keepSize: 0) {
    @if ($startSize==0) {
        $startSize: 0.000001;
    }

    @if ($minSize==0) {
        $minSize: 0.000001;
    }

    // Для calc();
    $addSize: math.div($startSize - $minSize, 16);

    @if ($widthFrom==$containerWidth and $maxWidthContainer==0) {
        $widthFrom: $maxWidth;
    }

    // Брейк-поинты в EM
    $widthFromMedia: em($widthFrom);
    $widthToMedia: em($widthTo);

    // Формула плавающего значения
    // Источник: https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
    $slope: math.div(($startSize - $minSize), ($widthFrom - $widthTo));
    $yIntersection: -$widthTo * $slope+$minSize;

    @if ($yIntersection==0) {
        $yIntersection: 0.000001;
    }

    $flyValue: #{rem($yIntersection)}" + "#{$slope * 100}vw;

    // Получение значения свойства
    $propertyValue: #{"clamp(" rem($minSize) "," $flyValue "," rem($startSize) ")"};

    // Если отрицательные значения
    @if ($minSize > $startSize) {
        $propertyValue: #{"clamp(" rem($startSize) "," $flyValue "," rem($minSize) ")"};
    }

    // Если поддерживается clamp();
    @supports (#{$property}: $propertyValue) {
        #{$property}: $propertyValue;
    }

    // Если не поддерживается clamp();
    @supports not (#{$property}: $propertyValue) {
        #{$property}: calc(#{rem($minSize)} + #{$addSize} * (100vw - #{rem($widthTo)}) / #{math.div($widthFrom, 16) - math.div($widthTo, 16)});
    }

    // Устанавливаем значения по умолчанию
    @if $widthFrom !=$containerWidth and $widthFrom !=$maxWidth and $keepSize !=1 and $keepSize !=2 {
        @media (min-width: $widthFromMedia) {
            #{$property}: inherit;
        }
    }

    @if $widthTo !=$minWidth and $keepSize !=1 and $keepSize !=3 {
        @media (max-width: $widthToMedia) {
            #{$property}: inherit;
        }
    }
}


html,
body {
    height: 100%;
}

body {
    font-weight: 700;
    font-size: 16px;
    line-height: 154%;
    color: $black-main;
    font-family: 'REM';
    // line-height: 1.2;
    // letter-spacing: 0.6px;

    // font-weight: 400;
    // font-size: 15px;
    // line-height: 154%;
    // color: #363636;
}

.sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
}

/*
.title {
    @extend %title;
}*/

.main {
    flex-grow: 1;
}

.container {
    max-width: 1115px;
    margin: 0 auto;
    padding: 0 15px;
}

.title {
    font-size: 36px;
    text-align: center;
    text-transform: uppercase;

    @media (max-width: 1200px) {
        font-size: 33px;
    }

    @media (max-width: 992px) {
        font-size: 31px;
    }

    @media (max-width: 768px) {
        font-size: 28px;
    }

    @media (max-width: 576px) {
        font-size: 26px;
    }

    &--bem {
        margin-bottom: 70px;

        @media (max-width: 1200px) {
            margin-bottom: 60px;
        }

        @media (max-width: 992px) {
            margin-bottom: 50px;
        }

        @media (max-width: 768px) {
            margin-bottom: 40px;
        }

        @media (max-width: 576px) {
            margin-bottom: 30px;
        }
    }
}

.section {
    padding: 100px 0;
}

.btn {
    background: linear-gradient(-45deg, #bb9f5c, #b99b6b, #655a3c);
}

.info span {
    color: #b9a36b;
}

// стоит ли растянуть ховер на весь блок с свг
.info {
    display: flex;
    justify-content: space-between;
    align-items: center;
    text-align: center;

    // max-width: 440px;
    // gap: 60px;
    @media (max-width: 576px) {
        display: block;
    }

    &__time {
        font-size: 12px;
        line-height: 1.2;
        color: #2c2c2c;

        @media (max-width: 576px) {
            margin-bottom: 20px;
        }


        // @include adaptiveValue("margin-right", 60, 20);


    }

    &__time p {
        // font-weight: 400;
        // display: block;
        // display: block;

    }

    &__box {
        // margin-right: 60px;
        // &:not(:last-child) {
        //     margin-right: 60px;
        // }
    }

    &__wrapper {
        // margin-bottom: 10px;
        display: flex;
        justify-content: center;
        align-items: center;
        max-width: 195px;
        flex-wrap: wrap;
        // потом сделать выше врапер

        //  overflow: hidden;
        &--animation {
            animation-name: link-scale;
            animation-duration: 2s;
            animation-timing-function: linear;
            animation-iteration-count: infinite;
        }

    }

    // &__box p {}

    &__inner {
        display: flex;
        justify-content: center;
        align-items: center;
        margin-bottom: 5px;
    }

    &__inner p {
        // font-weight: 400;
        // margin-bottom: 5px;
    }

    &__inner span {
        // font-weight: 400;
        color: #b9a36b;
    }

    &__svg {
        margin-right: 5px;
        // transform:rotate(270deg !important);
        // style="transform:rotate(270deg !important);">
    }

    &__tel {
        font-weight: 400;

    }

    &__link {
        //  display: block;
        // color: #2c2c2c;
        transition: color 0.5s;



        &:focus {
            color: $focus;
        }

        &:hover {
            color: $ac;
        }

        &:active {
            color: $active;
        }
    }

    &__text {
        font-family: Century Gothic;
        font-weight: 400;
        font-size: 12px;
        line-height: 1.2;
        color: #2c2c2c;
    }

    &__text span {
        color: #b9a36b;
    }
}

@function max($numbers...) {
    @return m#{a}x(#{$numbers});
}

@function min($numbers...) {
    @return m#{i}n(#{$numbers});
}

// переименовать!!!!!!
@keyframes my-animation {
    0% {
        right: 120%;
    }

    20% {
        right: -20%;
    }

    100% {
        right: -20%;
    }
}

// переименовать!!!!!!
@keyframes my {
    0% {
        background: linear-gradient(180deg, #ceb77d 0%, #67563b 100%);
    }
}




@keyframes menu-menu {
    0% {

        transform: translateX(0%);
    }

    30% {

        transform: translateX(10%);
    }
}

@keyframes link-scale {
    0% {
        transform: scale(1);
    }

    30% {
        transform: scale(0.8);
    }
}

// переименовать!!!!!!
@keyframes grat {
    0% {
        background-position: 0 50%;
    }

    50% {
        background-position: 100% 50%;
    }

    100% {
        background-position: 0 50%;
    }
}



.section {
    &--bem {
        padding: $padding-main 0;

        @media (max-width: 992px) {
            padding: $padding-992 0;
        }

        @media (max-width: 768px) {
            padding: $padding-768 0;
        }

        @media (max-width: 576px) {
            padding: $padding-576 0;
        }
    }
}

// footer__link--indent
// @mixin adaptiv-value($property, $startSize, $minSize, $type) {
//     $addSize: $startSize - $minSize;

//     @if $type==1 {
//         // только если меньше контейнера
//         #{$property}: $startSize + px;

//         @media (max-width: #{$maxWidthContainer + px }) {
//             #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidthContainer - 320}));
//         }
//     }

//     @else if $type==2 {
//         // только если больше контейнера
//         #{$property}: $startSize + px;

//         @media (min-width: #{$maxWidthContainer + px }) {
//             #{$property}: calc(#{$minSize + px} #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320}));
//         }
//     }

//     @else {
//         // всегда
//         #{$property}: calc(#{$minSize + px} #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320}));

//     }
// }


// .div {
//     @include adaptiveValue("font-size", 50, 20);
// }